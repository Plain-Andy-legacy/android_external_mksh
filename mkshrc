# Copyright (c) 2010, 2012, 2013, 2014
#	Thorsten Glaser <tg@mirbsd.org>
# This file is provided under the same terms as mksh.
#-
# Minimal /system/etc/mkshrc for Android
#
# 2015 - Added Plain-Tweak functions for Plain-Andy project
#
# Support: https://launchpad.net/mksh

: ${TERM:=vt100} ${HOME:=/data} ${MKSH:=/system/bin/sh} ${HOSTNAME:=$(getprop ro.product.device)}
: ${SHELL:=$MKSH} ${USER:=$(typeset x=$(id); x=${x#*\(}; print -r -- ${x%%\)*})} ${HOSTNAME:=android}
if (( USER_ID )); then PS1='$'; else PS1='#'; fi
PS4='[$EPOCHREALTIME] '; PS1='${|
	local e=$?

	(( e )) && REPLY+="$e|"

	return $e
}$USER@$HOSTNAME:${PWD:-?} '"$PS1 "
export HOME HOSTNAME MKSH SHELL TERM USER
alias l='ls'
alias la='l -a'
alias ll='l -l'
alias lo='l -a -l'

function hd {
	local -Uui16 -Z11 pos=0
	local -Uui16 -Z5 hv=2147483647
	local dasc line i

	cat "$@" | { set +U; if read -arN -1 line; then
		typeset -i1 line
		i=0
		while (( i < ${#line[*]} )); do
			hv=${line[i++]}
			if (( (pos & 15) == 0 )); then
				(( pos )) && print -r -- "$dasc|"
				print -n "${pos#16#}  "
				dasc=' |'
			fi
			print -n "${hv#16#} "
			if (( (hv < 32) || (hv > 126) )); then
				dasc+=.
			else
				dasc+=${line[i-1]#1#}
			fi
			(( (pos++ & 15) == 7 )) && print -n -- '- '
		done
		while (( pos & 15 )); do
			print -n '   '
			(( (pos++ & 15) == 7 )) && print -n -- '- '
		done
		(( hv == 2147483647 )) || print -r -- "$dasc|"
	fi; }
}

function more {
	(
		set +m
		cat "$@" |&
		trap "rv=\$?; kill $! >/dev/null 2>&1; exit \$rv" EXIT
		while IFS= read -pr line; do
			llen=${%line}
			(( llen == -1 )) && llen=${#line}
			(( llen = llen ? (llen + COLUMNS - 1) / COLUMNS : 1 ))
			if (( (curlin += llen) >= LINES )); then
				print -n -- '\033[7m--more--\033[0m'
				read -u1 || exit $?
				[[ $REPLY = [Qq]* ]] && exit 0
				curlin=$llen
			fi
			print -r -- "$line"
		done
	)
}

function setenv {
	eval export "\"$1\""'="$2"'
}

for p in ~/.bin; do
	[[ -d $p/. ]] || continue
	[[ :$PATH: = *:$p:* ]] || PATH=$p:$PATH
done

unset p

if [ -z $(getprop persist.sys.extstorage)]; then
	extsd='/sdcard'
else
	extsd=$(getprop persist.sys.extstorage)
fi

function plaintweakhelp {
echo "The following commands are valid:"
echo "command: function"
echo ""
echo "gov -Sets governor for cores 1 & 2"
echo "gov2 -Sets governor for cores 3 & 4"
echo "minkhz -Sets Min CPU clockrate for cores 1 & 2"
echo "minkhz2 -Sets Min CPU clockrate for cores 3 & 4"
echo "maxkhz -Sets Max CPU clockrate for cores 1 & 2"
echo "maxkhz2 -Sets Max CPU clockrate for cores 3 & 4"
echo "scheduler - Sets IO scheduler"
echo "tcpcong - Sets TCP Congestion Control"
echo "backupbuildprop - Backs up temporary /system/build.prop (does not persist between flashes)"
echo "restorebuildprop - Restores temporary /system/build.prop"
echo "restoreplaintweakconfig - Sources & restores Plain-Tweak properties from internal storage"
echo "density <value> - Sets custom LCD density"
echo "bootanim - Toggles boot animations"
echo "toggle - Toggles Plain-Tweak kernel & LCD density service"

}
function gov {
	gov=$1
	if [ -z $gov ]; then
	sysrw
	echo "Cores 1/2 Governor selection:"
	echo
	governors=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | sed 's/ /\n/g' | sed '$d')
	# Load text file lines into a bash array & print as a menu.
	OLD_IFS=$IFS
	IFS=$'\n'
	let line_counter=0
	for line in $governors; do
		let line_counter=$(($line_counter+1))
		printf "${line_counter}) ${line}\n"
	done
	IFS=$OLD_IFS
	echo "Choose number selection[0 = default or 99 = exit]:"
	read input
	if [ "$input" == "99" ];then
	exit
	fi
	if [ "$input" -gt "$line_counter" ];then
	echo "Invalid selection: Aborting script"
	exit
	fi
	sed -i '/gov=/d' $extsd/plaintweak
	setprop persist.sys.gov ""
	if [ "$input" != "0" ];then
	gov=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | sed 's/ /\n/g' | sed '$d' | head -n $input | tail -n 1)
	echo 'gov='$gov >> $extsd/plaintweak
	setprop persist.sys.gov $gov
	fi
	else
	sed -i '/gov=/d' $extsd/plaintweak
	echo 'gov='$gov >> $extsd/plaintweak
	setprop persist.sys.gov $gov
	fi
	sysro
clear
}
function gov2 {
gov2=$1
if [ -z $gov2 ]; then
echo "Cores 3/4 Governor selection:"
echo
governors=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | sed 's/ /\n/g' | sed '$d')
# Load text file lines into a bash array & print as a menu.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $governors; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Choose number selection[0 = default or 99 = exit]:"
read input
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
sed -i '/gov2=/d' $extsd/plaintweak
setprop persist.sys.gov2 ""
if [ "$input" != "0" ];then
gov=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | sed 's/ /\n/g' | sed '$d' | head -n $input | tail -n 1)
echo 'gov2='$gov2 >> $extsd/plaintweak
setprop persist.sys.gov2 $gov2
fi
else
sed -i '/gov2=/d' $extsd/plaintweak
echo 'gov2='$gov2 >> $extsd/plaintweak
setprop persist.sys.gov2 $gov2
fi
clear
}
function minkhz {
	minkhz=$1
	if [ -n $1 ]; then
	sysrw
	echo "Cores 1/2 Min CPU Clock selection:"
	echo
	frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | head -n 4)
	# Load text file lines into a bash array.
	OLD_IFS=$IFS
	IFS=$'\n'
	let line_counter=0
	for line in $frequencies; do
		let line_counter=$(($line_counter+1))
		printf "${line_counter}) ${line}\n"
	done
	IFS=$OLD_IFS
	echo "Choose number selection[0 = default or 99 = exit]:"
	read input
	if [ "$input" == "99" ];then
	exit
	fi
	if [ "$input" -gt "$line_counter" ];then
	echo "Invalid selection: Aborting script"
	exit
	fi
	sed -i '/minkhz=/d' $extsd/plaintweak
	setprop persist.sys.minkhz ""
	if [ "$input" != "0" ];then
	minkhz=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | head -n 4 | head -n $input | tail -n 1)
	echo 'minkhz='$minkhz >> $extsd/plaintweak
	setprop persist.sys.minkhz $minkhz
	fi
	else
	sed -i '/minkhz=/d' $extsd/plaintweak
	echo 'minkhz='$minkhz >> $extsd/plaintweak
	setprop persist.sys.minkhz $minkhz
	fi
	sysro
clear
}
function minkhz2 {
	minkhz2=$1
	if [ -z $minkhz2 ]
	sysrw
	echo "Cores 3/4 Min CPU Clock selection:"
	echo
	frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | head -n 4)
	# Load text file lines into a bash array.
	OLD_IFS=$IFS
	IFS=$'\n'
	let line_counter=0
	for line in $frequencies; do
		let line_counter=$(($line_counter+1))
		printf "${line_counter}) ${line}\n"
	done
	IFS=$OLD_IFS
	echo "Choose number selection[0 = default or 99 = exit]:"
	read input
	if [ "$input" == "99" ];then
	exit
	fi
	if [ "$input" -gt "$line_counter" ];then
	echo "Invalid selection: Aborting script"
	exit
	fi
	sed -i '/minkhz2=/d' $extsd/plaintweak
	setprop persist.sys.minkhz2 ""
	if [ "$input" != "0" ];then
	minkhz=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | head -n 4 | head -n $input | tail -n 1)
	echo 'minkhz2='$minkhz >> $extsd/plaintweak
	setprop persist.sys.minkhz2 $minkhz
	fi
	else
	sed -i '/minkhz2=/d' $extsd/plaintweak
	echo 'minkhz2='$minkhz2 >> $extsd/plaintweak
	setprop persist.sys.minkhz2 $minkhz2
	fi
	sysro
clear
}
function maxkhz {
	maxkhz=$1
	if [ -z $maxkhz ]; then
	sysrw
	echo "Cores 1/2 Max CPU Clock selection:"
	echo
	frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | tail -n 5)
	# Load text file lines into a bash array.
	OLD_IFS=$IFS
	IFS=$'\n'
	let line_counter=0
	for line in $frequencies; do
		let line_counter=$(($line_counter+1))
		printf "${line_counter}) ${line}\n"
	done
	IFS=$OLD_IFS
	echo "Choose number selection[0 = default or 99 = exit]:"
	read input
	if [ "$input" == "99" ];then
	exit
	fi
	if [ "$input" -gt "$line_counter" ];then
	echo "Invalid selection: Aborting script"
	exit
	fi
	sed -i '/maxkhz=/d' $extsd/plaintweak
	setprop persist.sys.maxkhz ""
	if [ "$input" != "0" ];then
	maxkhz=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | tail -n 5 | head -n $input | tail -n 1)
	echo 'maxkhz='$maxkhz >> $extsd/plaintweak
	setprop persist.sys.maxkhz $maxkhz
	fi
	else
	sed -i '/maxkhz=/d' $extsd/plaintweak
	echo 'maxkhz='$maxkhz >> $extsd/plaintweak
	setprop persist.sys.maxkhz $maxkhz
	fi
	sysro
clear
}
function maxkhz2 {
	maxkhz2=$1
	if [ -z $maxkhz2 ]; then
	sysrw
	echo "Cores 3/4 Max CPU Clock selection:"
	echo
	frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | tail -n 5)
	# Load text file lines into a bash array.
	OLD_IFS=$IFS
	IFS=$'\n'
	let line_counter=0
	for line in $frequencies; do
		let line_counter=$(($line_counter+1))
		printf "${line_counter}) ${line}\n"
	done
	IFS=$OLD_IFS
	echo "Choose number selection[0 = default or 99 = exit]:"
	read input
	if [ "$input" == "99" ];then
	exit
	fi
	if [ "$input" -gt "$line_counter" ];then
	echo "Invalid selection: Aborting script"
	exit
	fi
	sed -i '/maxkhz2=/d' $extsd/plaintweak
	setprop persist.sys.maxkhz2 ""
	if [ "$input" != "0" ];then
	maxkhz=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | tail -n 5 | head -n $input | tail -n 1)
	echo 'maxkhz2='$maxkhz >> $extsd/plaintweak
	setprop persist.sys.maxkhz2 $maxkhz
	fi
	else
	sed -i '/maxkhz2=/d' $extsd/plaintweak
	echo 'maxkhz2='$maxkhz2 >> $extsd/plaintweak
	setprop persist.sys.maxkhz2 $maxkhz2
	fi
	sysro
clear
}
function scheduler {
scheduler=$1
if [ -z $scheduler ];then
sysrw
echo "IO Scheduler selection:"
echo
schedulers=$(cat /sys/block/mmcblk0/queue/scheduler | sed 's/[[]//g' | sed 's/[]]//g' | sed 's/ /\n/g' | sed '$d')
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $schedulers; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Choose number selection[0 = default or 99 = exit]:"
read input
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
sed -i '/scheduler=/d' $extsd/plaintweak
setprop persist.sys.scheduler ""
if [ "$input" != "0" ];then
scheduler=$(cat /sys/block/mmcblk0/queue/scheduler | sed 's/[[]//g' | sed 's/[]]//g' | sed 's/ /\n/g' | sed '$d' | sed 's/ //g' | head -n $input | tail -n 1)
echo 'scheduler='$scheduler >> $extsd/plaintweak
setprop persist.sys.scheduler $scheduler
fi
else
sed -i '/scheduler=/d' $extsd/plaintweak
echo 'scheduler='$scheduler >> $extsd/plaintweak
setprop persist.sys.scheduler $scheduler
fi
sysro
clear
}
function tcpcong {
tcpcong=$1
if [ -z $tcpcong ]; then
sysrw
echo "TCP Congestion Control selection:"
echo
tcpcong=$(cat /proc/sys/net/ipv4/tcp_available_congestion_control | sed 's/ /\n/g')
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $tcpcong; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Choose number selection[0 = default or 99 = exit]:"
read input
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
sed -i '/tcpcong=/d' $extsd/plaintweak
setprop persist.sys.tcpcong ""
if [ "$input" != "0" ];then
tcpcong=$(cat /proc/sys/net/ipv4/tcp_available_congestion_control | sed 's/ /\n/g' | head -n $input | tail -n 1)
echo 'tcpcong='$tcpcong >> $extsd/plaintweak
setprop persist.sys.tcpcong $tcpcong
sysro
fi
sed -i '/tcpcong=/d' $extsd/plaintweak
echo 'tcpcong='$tcpcong >> $extsd/plaintweak
setprop persist.sys.tcpcong $tcpcong
fi
}

function backupbuildprop {
	sysrw
	cp /system/build.prop /system/.build.prop-original
	sysro
}
function restorebuildprop {
	sysrw
	cp /system/.build.prop-original /system/build.prop
	sysro
}
function restoreplaintweakconfig {
	sysrw
	if [ -e $extsd/plaintweak ]; then
	for line in $(cat $extsd/plaintweak)
	do
	setprop persist.sys.$(echo $line | sed s'/=/ /')
	done
	fi
	if [ -e $extsd/customdensity ]; then
	cat $extsd/customdensity >> /system/vendor/build.prop
	fi
	setprop persist.sys.enable_plaintweak 1
	chmod 0644 /system/vendor/build.prop
	sysro
}
function bootanim {
	sysrw
	bootanim=$(grep "debug.sf.nobootanimation" /vendor/build.prop | sed 's/debug.sf.nobootanimation*.//')
	if [ -n $bootanim ]; then
	if [ "$bootanim" == "1" ]; then
	echo "Boot Animation is currently off"
	echo "Re-enabling Boot Animation"
	sed -i -e 's/debug\.sf\.nobootanimation=1//' /vendor/build.prop
	fi
	fi
	if [ -z $bootanim ]; then
	echo "Disabling Boot Animation"
	echo "debug.sf.nobootanimation=1" >> /vendor/build.prop
	fi
	sysro
}
function density {
	sysrw
	case "$setdensity" in
		stock)
		rm $extsd/customdensity
		if [ -e /tmp/recovery.log ]; then
		echo $setdensity" is density obtained from Aroma" >> /tmp/recovery.log
		else
		echo -n '\03 Build-Prop Tweaks\0 Set '$customdensity' as new custom density\0' > /dev/log/main
		fi
		if [ ! -e /tmp/recovery.log ]; then
		sysro
		fi
		;;
		*)
		echo 'customdensity='$setdensity > $extsd/customdensity
		if [ -e /tmp/recovery.log ]; then
		echo $setdensity" is density obtained from Aroma" >> /tmp/recovery.log
		else
		echo -n '\03 Build-Prop Tweaks\0 Set '$customdensity' as new custom density\0' > /dev/log/main
		fi
		if [ ! -e /tmp/recovery.log ]; then
		sysro
		fi
		;;
	esac
	sysro
}
function toggle {
	toggle=$(getprop persist.sys.enable_plaintweak)
	if [ "$toggle" == "0" ]; then
	echo "Enabling Plain-Tweak"
	setprop persist.sys.enable_plaintweak 1
	fi
	if [ "$toggle" == "1" ]; then
	echo "Disabling Plain-Tweak"
	setprop persist.sys.enable_plaintweak 0
	fi
	sh /system/etc/init.plain.kerneltweak.sh
}
function kernelconfig {
  maxkhz
	maxkhz2
	minkhz
	minkhz2
	gov
	gov2
	scheduler
	tcpcong
}

: place customizations above this line
